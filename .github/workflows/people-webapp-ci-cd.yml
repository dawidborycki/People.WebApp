name: CI/CD Pipeline (Helm)

on:
  push:
    branches:
      - ci-cd-iac
      
env:
  IMAGE_NAME: people.webapp
  # ACR_NAME: peopletf
  # ACR_LOGIN_SERVER: people.azurecr.io
  # RG_NAME: rg-aks-people-tf
  # CLUSTER_NAME: aks-people-tf
  # AKS_POOL_NODE_NAME: aks-people-agentpool

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    outputs:
      acr_name: ${{ steps.terraform-apply.outputs.ACR_NAME }}
      acr_login_server: ${{ steps.terraform-apply.outputs.ACR_LOGIN_SERVER }}
      rg_name: ${{ steps.terraform-apply.outputs.RG_NAME }}
      cluster_name: ${{ steps.terraform-apply.outputs.CLUSTER_NAME }}
      aks_pool_node_name: ${{ steps.terraform-apply.outputs.AKS_POOL_NODE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Configure Azure credentials from GitHub Secret
        run: |
          echo "ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')" >> $GITHUB_ENV
        shell: bash
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3   
        with:
          terraform_wrapper: false   

      - name: Terraform Init        
        working-directory: ./iac
        run: |
          STORAGE_ACCOUNT_NAME=$(grep 'storage_account_name' backend.tf | awk '{print $3}' | tr -d '"')
          RESOURCE_GROUP_NAME=$(grep 'resource_group_name' backend.tf | awk '{print $3}' | tr -d '"')
        
          ARM_ACCESS_KEY=$(az storage account keys list --account-name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP_NAME --query '[0].value' -o tsv)
          echo "ARM_ACCESS_KEY=${ARM_ACCESS_KEY}" >> $GITHUB_ENV
        
          terraform init

      - name: Terraform Plan        
        working-directory: ./iac
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./iac
        id: terraform-apply
        run: |
          terraform apply -auto-approve
          echo "ACR_NAME=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
          
  build-and-push-docker-image:
    runs-on: ubuntu-latest    
    needs: infrastructure
    outputs:
      fq_image_name: ${{steps.build-image.outputs.FQ_IMAGE_NAME}}
      
    steps:    
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - name: Login to Azure Container Registry
        run: az acr login -n ${{ needs.infrastructure.outputs.acr_name }}"

      - name: Count existing tags and configure the image tag    
        run: |
          COUNT=$(az acr repository show-tags -n $ACR_NAME --repository $IMAGE_NAME -o tsv | wc -l)
          IMAGE_TAG=v$(expr $COUNT + 1)      
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build-image
        run: |
          FQ_IMAGE_NAME=$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG
          echo "FQ_IMAGE_NAME=$FQ_IMAGE_NAME" >> $GITHUB_ENV
          echo "FQ_IMAGE_NAME=$FQ_IMAGE_NAME" >> $GITHUB_OUTPUT
          docker build -t $FQ_IMAGE_NAME .
          docker push $FQ_IMAGE_NAME

      - name: Logout from Azure Container Registry
        run: docker logout $ACR_LOGIN_SERVER
        
      - name: Cleanup Docker images
        run: docker image rm $FQ_IMAGE_NAME  

  deploy-to-aks-with-helm:  
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - name: Configure Kubernetes context
        run: az aks get-credentials -g $RG_NAME -n $CLUSTER_NAME

      - name: Update values.yaml
        env:
          FQ_IMAGE_NAME: ${{ needs.build-and-push-docker-image.outputs.fq_image_name }}
        run: |
          MANAGED_CLIENT_ID=$(az identity list --query "[?contains(name, '$AKS_POOL_NODE_NAME')].clientId" -o tsv)
          sed -i "s|<FQ_IMAGE_NAME>|$FQ_IMAGE_NAME|g" ./helm/values.yaml
          sed -i "s|<MANAGED_CLIENT_ID>|$MANAGED_CLIENT_ID|g" ./helm/values.yaml
          cat ./helm//values.yaml

      - name: Helm Lint
        run: helm lint ./helm

      - name: Deploy with Helm
        run: helm upgrade --install people-web-app-helm ./helm/